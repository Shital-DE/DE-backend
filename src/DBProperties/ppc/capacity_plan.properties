#------------Generate new capacity plan
cpCheckDate = SELECT todate::text FROM ppc.pd_product_capacityplan_log \
              order by runnumber desc limit 1

cpProductList = SELECT po.so_id as salesorder_id, po.sod_id, \
									trim(po.referancedocumentnumber) as po, po.lineitemnumber, po.product_id, \
									trim(po.product_code) as product, trim(po.revision_number) as revision_number, \
									to_char(po.plandate,'YYYY-MM-DD') as plandate, po.quantity as orderedqty \
					FROM data.vw_ss_customer_pendingpo po \
							join data.pd_product pd on pd.id = po.product_id \
					WHERE plandate >= '{fromDate}' and plandate <= '{toDate}' and pd.producttype_code in ('P','04') and revision_number != '' \
					ORDER BY referancedocumentnumber, lineitemnumber \

addNewCPProductList = SELECT distinct po.so_id as salesorder_id, \
													po.sod_id, \
													po.referancedocumentnumber as po, \
													po.lineitemnumber, \
													po.product_id, \
													trim(po.product_code) as product, \
													trim(po.revision_number) as revision_number, \
													po.duedate as duedate, \
													to_char(po.plandate,'YYYY-MM-DD') as plandate, \
													po.quantity as orderedqty \
											FROM data.vw_ss_customer_pendingpo po \
													join data.pd_product pd on pd.id = po.product_id \
													left join ppc.pd_product_capacityplan cp on \
														cp.ss_salesorder_id = po.so_id and \
														cp.lineitemno = po.lineitemnumber and \
														cp.pd_product_id = po.product_id and \
														cp.revision_no = po.revision_number and \
														cp.runnumber = '{runnumber}' \
											WHERE po.plandate >= '{fromDate}' and \
													po.plandate <= '{toDate}' and \
													pd.producttype_code in ('P','04' ) and \
													cp.ss_salesorder_id is NULL and po.revision_number !='' \
											ORDER BY referancedocumentnumber, lineitemnumber \

newPoPlanProductList = SELECT distinct po.so_id as salesorder_id, \
		po.sod_id, \
		po.referancedocumentnumber as po, \
		po.lineitemnumber, \
		po.product_id, \
		trim(po.product_code) as product, \
		trim(po.revision_number) as revision_number, \
		po.duedate as duedate, \
		to_char(po.plandate,'YYYY-MM-DD') as plandate, \
		(po.quantity+po.excessquantity) as orderedqty, \
		false as checkboxval \
FROM data.vw_ss_customer_pendingpo po \
		join data.pd_product pd on pd.id = po.product_id \
		left join (select * from ppc.pd_product_capacityplan where runnumber = '{runnumber}') cp on \
			cp.ss_salesorder_id = po.so_id and \
			cp.lineitemno = po.lineitemnumber \
WHERE plandate >= '{fromDate}' and \
		plandate <= '{toDate}' and \
		pd.producttype_code in ('P','04' ) and \
		po.revision_number !='' and \
		po.so_id || po.lineitemnumber not in (select ss_salesorder_id || lineitemno from ppc.pd_product_capacityplan where runnumber = '{runnumber}') \
ORDER BY referancedocumentnumber, lineitemnumber

cpProductListSubQuery = SELECT \
							route.id, \
							route.product_id, \
							route.workcentre_id, \
							wc.code as workcentre, \
							route.sequencenumber, \
							route.totalsetuptimemins as setuptimemins, \
							route.totalruntimemins as runtimemins, \
							route.revision_number \
						FROM ppc.pd_product_productroute route \
							JOIN data.wr_workcentre wc on (wc.id = route.workcentre_id) and wc.isincapacityplan = 'Y' \
						WHERE product_id = '{product_id}' and revision_number = '{revision_number}' ORDER BY route.sequencenumber


generateRunnumber = SELECT runnumber FROM ppc.pd_product_capacityplan_log ORDER BY runnumber DESC limit 1 \

saveCapacityPlanParentQuery = INSERT INTO ppc.pd_product_capacityplan \
        (id,runnumber, ss_salesorder_id, lineitemno, pd_product_id, quantity, revision_no) \
        VALUES ('{id}','{runnumber}','{salesorder_id}', '{lineitemno}', '{product_id}', '{quantity}', '{revision_no}') 

saveCapacityPlanChildQuery = INSERT INTO ppc.pd_product_capcityplan_wclist \
        (parent_id, workcentre_id, runtime_perunit, runtime_total, runno) \
        VALUES ('{parent_id}', '{workcentre_id}', '{runtime_perunit}', '{runtime_total}', '{runno}')

cpRundataLog = INSERT INTO ppc.pd_product_capacityplan_log \
        (runnumber, fromdate, todate, createdby) \
        VALUES ('{runnumber}', '{fromdate}', '{todate}','{userid}')

#-------------CP list
capacityPlanList = SELECT runnumber, \
        'CP - '|| TO_CHAR(fromdate, 'DD-MM-YYYY') || ' To ' || TO_CHAR(todate, 'DD-MM-YYYY') as capacity_plan_name, \
			TO_CHAR(fromdate, 'YYYY-MM-DD')	as fromdate , TO_CHAR(todate, 'YYYY-MM-DD') as todate \
        FROM ppc.pd_product_capacityplan_log \
        ORDER BY runnumber DESC 


#------------------Drag and drop
cp_dragdropList = SELECT cp.id as cpid, \
		cpchild.id as cpchild_id, \
		cp.runnumber, \
		cp.ss_salesorder_id as salesorder_id, \
		cp.lineitemno as lineitemnumber, \
		cp.pd_product_id as product_id, \
		trim(cp.revision_no) as revision_number, \
		cp.quantity, \
		cpchild.workcentre_id, \
		route.sequencenumber, \
		trim(so.referancedocumentnumber) as po, \
		trim(pd.code) as product, \
		trim(wc.code) as workcentre \
	FROM ppc.pd_product_capacityplan cp \
		JOIN ppc.pd_product_capcityplan_wclist cpchild on cpchild.parent_id = cp.id \
		JOIN data.wr_workcentre wc on wc.id = cpchild.workcentre_id \
		JOIN data.ss_salesorder so on so.id = cp.ss_salesorder_id \
		JOIN data.pd_product pd on pd.id = cp.pd_product_id \
		JOIN ppc.pd_product_productroute route \
			on route.product_id = cp.pd_product_id \
			and route.revision_number = cp.revision_no \
			and route.workcentre_id = cpchild.workcentre_id \
		LEFT JOIN ppc.pd_product_capacityplan_execution ce on ce.capacityplan_child_id = cpchild.id \
	WHERE cp.runnumber = '{runnumber}' and ce.capacityplan_child_id is null \
		and (cp.ss_salesorder_id,cp.pd_product_id,cp.lineitemno) not in \
			(SELECT os.ss_salesorder_id, product_id, lineitemnumber \
			 FROM data.ss_outwardsupply_detail osd \
			 join data.ss_outwardsupply os on os.id = osd.ss_outwardsupply_id) \
	ORDER BY so.referancedocumentnumber, cp.lineitemno, route.sequencenumber

saveDragProduct = INSERT INTO ppc.pd_product_capacityplan_execution( \
	 									capacityplan_id, capacityplan_child_id, ss_salesorder_id, pd_product_id, lineitemno, \
         						revision_no, sequence_no, quantity, wr_workcentre_id, runnumber) \
								VALUES ('{capacityplan_id}', '{cp_child_id}', '{salesorder_id}', '{product_id}', '{lineitemno}', \
        				'{revision_no}', '{sequence_no}', '{quantity}', '{workcentre_id}', '{runnumber}')

updateWSDragProduct = UPDATE ppc.pd_product_capacityplan_execution \
											SET wr_workstation_id = '{workstation_id}' \
											WHERE capacityplan_id = '{capacityplan_id}' and capacityplan_child_id = '{cp_child_id}'

workcentreProduct = SELECT cpe.id, cpe.capacityplan_id as cpid, cpe.capacityplan_child_id as cpchild_id, \
					cpe.ss_salesorder_id as salesorder_id, cpe.pd_product_id as product_id, \
					cpe.lineitemno as lineitemnumber, trim(cpe.revision_no) as revision_number, \
					cpe.sequence_no as sequencenumber, cpe.quantity, cpe.wr_workcentre_id as workcentre_id, \
					cpe.wr_workstation_id as workstationId, cpe.runnumber, \
					trim(so.referancedocumentnumber) as po, \
					trim(pd.code) as product, \
					trim(ws.code) as workstation \
				FROM ppc.pd_product_capacityplan_execution cpe \
				JOIN data.ss_salesorder so on so.id = cpe.ss_salesorder_id \
				JOIN data.pd_product pd on pd.id = cpe.pd_product_id \
				left join data.wr_workcentre_workstation ws on ws.id = cpe.wr_workstation_id \
				where cpe.wr_workcentre_id = '{workcentre_id}' and cpe.runnumber = '{runnumber}' \
				and (cpe.ss_salesorder_id,cpe.pd_product_id,cpe.lineitemno) not in \
					(SELECT os.ss_salesorder_id, product_id, lineitemnumber \
					 FROM data.ss_outwardsupply_detail osd \
					 join data.ss_outwardsupply os on os.id = osd.ss_outwardsupply_id) \
				order by so.referancedocumentnumber, pd.code

workcentreProduct_delete = DELETE FROM ppc.pd_product_capacityplan_execution \
													 WHERE capacityplan_child_id = '{cp_child_id}'; 


#----------PO Date Change
searchCustomerPO = SELECT id as salesorderid, trim(referancedocumentnumber) as salesorder, \
									to_char(plandate,'YYYY-MM-DD') as plandate, to_char(duedate,'YYYY-MM-DD') as duedate \
									FROM data.ss_salesorder \
									WHERE referancedocumentnumber = '{po}'

getPOProductList = SELECT sd.id as sodetailsid, sd.ss_salesorder_id as salesorder_id, sd.product_id, \
						to_char(sd.plandate,'YYYY-MM-DD') as plandate, sd.lineitemnumber, \
						trim(sd.revision_number) as revision_number, \
						trim(pd.code) as product \
					FROM data.ss_salesorder_detail sd \
					JOIN data.pd_product pd on pd.id = sd.product_id \
					WHERE ss_salesorder_id = '{salesorderid}' \
					ORDER BY sd.plandate, sd.lineitemnumber asc

updatePlanDateSO = UPDATE data.ss_salesorder SET plandate = '{plandate}' WHERE id = '{salesorderid}'

updatePlanDateSODetailAll = UPDATE data.ss_salesorder_detail SET  plandate = '{plandate}' \
							WHERE ss_salesorder_id = '{salesorderid}'

updatePlanDateSODetail = UPDATE data.ss_salesorder_detail \
						SET  plandate = '{plandate}' \
						WHERE id = '{so_details_id}' and ss_salesorder_id = '{salesorderid}'

#------new cp query
capacityPlanProductList = SELECT \
    po.so_id as salesorder_id, po.sod_id, TRIM(po.referancedocumentnumber) as po, \
    po.lineitemnumber, po.product_id, TRIM(po.product_code) as product, TRIM(po.revision_number) as revision_number, \
    TO_CHAR(po.plandate,'YYYY-MM-DD') as plandate, (po.quantity+po.excessquantity) as orderedqty, false as checkboxval, \
    COALESCE(( \
        SELECT JSON_AGG(wc_route.wc_object) AS result_in_json \
        FROM ( \
            SELECT \
                JSON_BUILD_OBJECT( \
                    'id', route.id, \
                    'product_id', route.product_id, \
                    'workcentre_id', route.workcentre_id, \
                    'workcentre', TRIM(wc.code), \
                    'sequencenumber', route.sequencenumber, \
                    'setuptimemins', route.totalsetuptimemins, \
                    'runtimemins', route.totalruntimemins, \
                    'revision_number', TRIM(route.revision_number) \
                ) AS wc_object \
            FROM ppc.pd_product_productroute route \
            JOIN data.wr_workcentre wc \
            ON wc.id = route.workcentre_id \
            AND wc.isincapacityplan = 'Y' \
            WHERE product_id = po.product_id \
            AND revision_number = po.revision_number \
            ORDER BY route.sequencenumber \
        ) wc_route \
    ),'[]') AS workcentre_route \
FROM \
    data.vw_ss_customer_pendingpo po \
JOIN \
    data.pd_product pd \
ON \
    pd.id = po.product_id \
WHERE \
    plandate >= '{fromDate}' \
    AND plandate <= '{toDate}' \
    AND pd.producttype_code IN ('P', '04') \
    AND po.revision_number != '' \
		AND (po.so_id, po.lineitemnumber,po.product_id) not in(SELECT ss_salesorder_id, lineitemno, pd_product_id \
	  FROM ppc.pd_product_capacityplan) \
ORDER BY \
    po.referancedocumentnumber, po.lineitemnumber; 

#-------------Bar chart
productionTime1 = SELECT w.id, trim(w.code) as code, w.defaultminsperday * (cplog.todate - cplog.fromdate)  as availabletime, \
                COALESCE(SUM(pc.runtime_total), 0.0)::INTEGER AS requiredtime \
        FROM data.wr_workcentre w \
        LEFT JOIN ppc.pd_product_capcityplan_wclist pc ON pc.workcentre_id = w.id AND pc.runno = '{runnumber}' \
        JOIN ppc.pd_product_capacityplan_log cplog on cplog.runnumber = '{runnumber}' \
        WHERE w.isincapacityplan = 'Y' \
        GROUP BY w.id, w.code, cplog.todate, cplog.fromdate  \
        order by w.sequenceno asc 

productionTime = SELECT \
    w.id, TRIM(w.code) AS code, \
    COALESCE(SUM(pc.requiredtime)::int, 0) AS required_cp_time, \
    COALESCE(SUM(stat.total_minutes)::int, 0) AS utilized_cp_time \
FROM data.wr_workcentre w \
	LEFT JOIN ( \
		SELECT workcentre_id, COALESCE(SUM(runtime_total), 0)::INTEGER AS requiredtime \
		FROM ppc.pd_product_capcityplan_wclist \
		WHERE runno = '{runnumber}' \
		GROUP BY workcentre_id \
	) pc ON w.id = pc.workcentre_id \
	LEFT JOIN ( \
		SELECT workcentre_id, SUM(EXTRACT(EPOCH FROM (endprocesstime - startprocesstime)) / 60)::int AS total_minutes \
		FROM ppc.pd_product_workstationroute_status \
		WHERE cp_runnumber = '{runnumber}' \
		GROUP BY workcentre_id \
	) stat ON w.id = stat.workcentre_id \
WHERE w.isincapacityplan = 'Y' \
GROUP BY w.id, w.code \
ORDER BY w.sequenceno ASC

workstationShift = SELECT w.id , w.wr_workcentre_id, trim(w.code) as code, \
	json_agg(json_build_object( \
			 'id',  sub.id, \
			 'shift_id', sub.shift_id, \
			 'shift_status', sub.shift_status, \
			 'shift_duration', sub.shift_duration)) as checkboxlist \
FROM data.wr_workcentre_workstation w \
	left join ( \
		SELECT wts.id, wts.workstation_id, wts.shift_id, wts.shift_status, sf.duration_minutes as shift_duration \
		FROM ppc.wr_workstation_shift_status wts \
		JOIN ppc.wr_shift sf ON sf.id = wts.shift_id \
		order by workcentre_id, sequence_no \
	) as sub on sub.workstation_id = w.id \
where wr_workcentre_id = '{workcentre_id}' \
	group by(w.id) \
	order by code 

shift_status_update = UPDATE ppc.wr_workstation_shift_status \
	SET shift_status= '{value}' \
	WHERE id='{ws_status_id}'

shift_total = SELECT wc.id, trim(wc.code) as code, \
		(SELECT coalesce(sum(s.duration_minutes),0)::integer as total \
			FROM ppc.wr_workstation_shift_status w \
			join ppc.wr_shift s on s.id = w.shift_id \
			where w.shift_status = true and w.workcentre_id = wc.id) as shift_total \
	from data.wr_workcentre wc \
	where isincapacityplan='Y' \
	order by sequenceno

total_remaining_cpproducts = SELECT cpe.id, cpe.capacityplan_id as cpid, cpe.capacityplan_child_id as cpchild_id, 
					cpe.ss_salesorder_id as salesorder_id, cpe.pd_product_id as product_id, 
					cpe.lineitemno as lineitemnumber, trim(cpe.revision_no) as revision_number, 
					cpe.sequence_no as sequencenumber, cpe.quantity, cpe.wr_workcentre_id as workcentre_id, 
					cpe.wr_workstation_id as workstationId, cpe.runnumber, 
					trim(so.referancedocumentnumber) as po, 
					trim(pd.code) as product, 
					trim(ws.code) as workstation, 
					concat('CP - ',cplog.fromdate, ' to ', cplog.todate) cpname
				FROM ppc.pd_product_capacityplan_execution cpe 
				JOIN data.ss_salesorder so on so.id = cpe.ss_salesorder_id 
				JOIN data.pd_product pd on pd.id = cpe.pd_product_id 
				left join data.wr_workcentre_workstation ws on ws.id = cpe.wr_workstation_id 
				join ppc.pd_product_capacityplan_log cplog on cplog.runnumber = cpe.runnumber
				where cpe.runnumber in (SELECT runnumber FROM ppc.pd_product_capacityplan_log 
										where todate < now()::date
										order by runnumber desc limit 4) 
					and (cpe.ss_salesorder_id,cpe.pd_product_id,cpe.lineitemno) not in 
						(SELECT os.ss_salesorder_id, product_id, lineitemnumber 
						 FROM data.ss_outwardsupply_detail osd 
						 join data.ss_outwardsupply os on os.id = osd.ss_outwardsupply_id) 
				order by cpe.runnumber desc, so.referancedocumentnumber, pd.code

#realtime product view

realtime_product_view = SELECT cpe.id, cpe.capacityplan_id as cpid, cpe.capacityplan_child_id as cpchild_id, \
	   cpe.ss_salesorder_id as salesorder_id, cpe.pd_product_id as product_id, \
	   cpe.lineitemno as lineitemnumber, trim(cpe.revision_no) as revision_number, \
	   cpe.sequence_no as sequencenumber, cpe.quantity, cpe.wr_workcentre_id as workcentre_id, \
	   cpe.wr_workstation_id as workstationId, cpe.runnumber, \
       trim(so.referancedocumentnumber) as po, \
	   trim(pd.code) as product, \
	   trim(ws.code) as workstation, \
       COALESCE(( \
			SELECT JSON_AGG(wc_route.wc_object) AS result_in_json \
			FROM ( \
				SELECT \
					JSON_BUILD_OBJECT( \
						'routeSequence', route.sequencenumber, \
						'process', processroute.instruction, \
						'processSequence', processroute.processsequencenumber \
					)AS wc_object \
				FROM ppc.pd_product_productroute route \
				JOIN ppc.pd_product_productprocessroute processroute \
					ON processroute.productroute_id = route.id \
				WHERE product_id = cpe.pd_product_id \
					AND revision_number = cpe.revision_no \
					AND route.workcentre_id = '{workcentre_id}' \
				ORDER BY route.sequencenumber \
			) wc_route \
		),'[]') AS workcentre_route \
	FROM ppc.pd_product_capacityplan_execution cpe \
	JOIN data.ss_salesorder so on so.id = cpe.ss_salesorder_id \
	JOIN data.pd_product pd on pd.id = cpe.pd_product_id \
	JOIN ppc.pd_product_workstationroute_status wrs on wrs.cp_excution_id = cpe.capacityplan_child_id \
	LEFT JOIN data.wr_workcentre_workstation ws on ws.id = wrs.workstation_id \
	where cpe.wr_workcentre_id = '{workcentre_id}' and cpe.runnumber = '{runnumber}' \
	and (cpe.ss_salesorder_id,cpe.pd_product_id,cpe.lineitemno) not in \
		(SELECT os.ss_salesorder_id, product_id, lineitemnumber \
		 FROM data.ss_outwardsupply_detail osd \
		 join data.ss_outwardsupply os on os.id = osd.ss_outwardsupply_id) \
	order by so.referancedocumentnumber, pd.code