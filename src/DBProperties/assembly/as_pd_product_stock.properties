registerAndUpdateStock =    DO $$ \
                            DECLARE \
                                tablerecord RECORD; \
                                tablereturnid VARCHAR; \
                                historytableid VARCHAR; \
                                stockevent VARCHAR = '{stockevent}'; \
                                productid VARCHAR = '{productid}'; \
                                userid VARCHAR = '{createdby}'; \
                                quantity NUMERIC = {quantity}; \
                                newparentproduct_id VARCHAR = '{newparentproduct_id}'; \
                                newsodetails_id VARCHAR = '{newsodetails_id}'; \
                                newuom_id VARCHAR := '{uom_id}'; \
                                preUOM VARCHAR := '{preUOM}'; \
                                postUOM VARCHAR := '{postUOM}'; \
                                converted_quantity NUMERIC; \
                            BEGIN \
                                tablereturnid := ''; \
                                IF stockevent = 'Issue' OR stockevent = 'Inward' THEN \
                                    converted_quantity := (SELECT assembly.convert_quantity_in_specific_uom(quantity, preUOM, postUOM)); \
                                ELSE \
                                    converted_quantity := quantity; \
                                END IF; \
                                SELECT * INTO tablerecord \
                                FROM assembly.as_pd_product_stock \
                                WHERE product_id = productid; \
                                IF tablerecord IS NOT NULL THEN \
                                    IF stockevent = 'Issue' THEN \
                                        IF tablerecord.currentstock != 0 THEN \
                                            INSERT INTO assembly.as_pd_product_stockhistory ( \
                                                updatedon, createdby, productstock_id, stockevent, \
                                                quantity, parentproduct_id, sodetails_id, uom_id \
                                            ) VALUES ( \
                                                NOW(), userid, tablerecord.id, stockevent, \
                                                CASE WHEN tablerecord.currentstock < converted_quantity THEN tablerecord.currentstock ELSE converted_quantity END, \
                                                newparentproduct_id, newsodetails_id, newuom_id \
                                            ) RETURNING id INTO historytableid; \
                                        ELSE \
                                            historytableid := '1'; \
                                            tablereturnid := ''; \
                                        END IF; \
                                        IF historytableid IS NOT NULL THEN \
                                            UPDATE assembly.as_pd_product_stock \
                                            SET version = version + 1, \
                                                updatedon = NOW(), \
                                                currentstock = CASE WHEN currentstock < converted_quantity THEN 0 ELSE currentstock - converted_quantity END \
                                            WHERE id = tablerecord.id \
                                            RETURNING * INTO tablereturnid; \
                                        ELSE \
                                            historytableid := '1'; \
                                            tablereturnid := ''; \
                                        END IF; \
                                    ELSIF stockevent = 'Inward' THEN \
                                        IF tablerecord.currentstock != 0 THEN \
                                            INSERT INTO assembly.as_pd_product_stockhistory ( \
                                                updatedon, createdby, productstock_id, stockevent, \
                                                quantity, uom_id \
                                            ) VALUES ( \
                                                NOW(), userid, tablerecord.id, stockevent, \
                                                quantity, \
                                                newuom_id \
                                            ) RETURNING id INTO historytableid; \
                                        ELSE \
                                            historytableid := '1'; \
                                            tablereturnid := ''; \
                                        END IF; \
                                        IF historytableid IS NOT NULL THEN \
                                            UPDATE assembly.as_pd_product_stock \
                                            SET version = version + 1, \
                                                updatedon = NOW(), \
                                                currentstock = currentstock + converted_quantity \
                                            WHERE id = tablerecord.id \
                                            RETURNING * INTO tablereturnid; \
                                        ELSE \
                                            historytableid := '1'; \
                                            tablereturnid := ''; \
                                        END IF; \
                                    ELSE \
                                        IF tablerecord.currentstock != 0 THEN \
                                            INSERT INTO assembly.as_pd_product_stockhistory ( \
                                                updatedon, createdby, productstock_id, stockevent, \
                                                quantity, uom_id \
                                            ) VALUES ( \
                                                NOW(), userid, tablerecord.id, stockevent, \
                                                CASE WHEN tablerecord.currentstock < converted_quantity THEN tablerecord.currentstock ELSE converted_quantity END, \
                                                newuom_id \
                                            ) RETURNING id INTO historytableid; \
                                        ELSE \
                                            historytableid := '1'; \
                                            tablereturnid := ''; \
                                        END IF; \
                                        IF historytableid IS NOT NULL THEN \
                                            UPDATE assembly.as_pd_product_stock \
                                            SET version = version + 1, \
                                                updatedon = NOW(), \
                                                currentstock = CASE WHEN currentstock < converted_quantity THEN 0 ELSE currentstock - converted_quantity END \
                                            WHERE id = tablerecord.id \
                                            RETURNING * INTO tablereturnid; \
                                        ELSE \
                                            historytableid := '1'; \
                                            tablereturnid := ''; \
                                        END IF; \
                                    END IF; \
                                    IF tablereturnid IS NOT NULL THEN \
                                        tablereturnid := tablereturnid; \
                                    ELSE \
                                        tablereturnid := ''; \
                                    END IF; \
                                    RAISE NOTICE '%', tablereturnid; \
                                ELSE \
                                    INSERT INTO assembly.as_pd_product_stock ( \
                                        updatedon, createdby, product_id, currentstock \
                                    ) VALUES ( \
                                        NOW(), userid, productid, converted_quantity \
                                    ) RETURNING id INTO tablereturnid; \
                                    IF tablereturnid IS NOT NULL THEN \
                                        tablereturnid := tablereturnid; \
                                        INSERT INTO assembly.as_pd_product_stockhistory ( \
                                            updatedon, createdby, productstock_id, stockevent, \
                                            quantity, uom_id \
                                        ) VALUES ( \
                                            NOW(), userid, tablereturnid, stockevent, \
                                            converted_quantity, \
                                            newuom_id \
                                        ) RETURNING id INTO historytableid; \
                                    ELSE \
                                        tablereturnid := ''; \
                                    END IF; \
                                    RAISE NOTICE '%', tablereturnid; \
                                END IF; \
                            EXCEPTION \
                                WHEN others THEN \
                                    RAISE NOTICE '%', tablereturnid; \
                            END $$;

getAvailableStock = SELECT DISTINCT ON (asp.id) \
                    ROUND( \
                        (SELECT assembly.convert_quantity_in_specific_uom( \
                            asps.currentstock, \
                            asp.uom_id, \
                            aspsh.uom_id \
                        )), 3 \
                    ) AS currentstock, \
                    uom.code AS unit_of_measurement \
                    FROM assembly.as_pd_product_stock asps \
                    LEFT JOIN assembly.as_pd_product asp ON asp.id = asps.product_id \
                    LEFT JOIN assembly.as_pd_product_stockhistory aspsh On aspsh.productstock_id = asps.id \
                    LEFT JOIN data.cm_uom uom ON uom.id = aspsh.uom_id \
                    WHERE product_id ='{product_id}';

updateStock =   UPDATE assembly.as_pd_product_stock \
                SET version=version+1, updatedon=NOW(), createdby='{createdby}', currentstock= currentstock + {currentstock} \
                WHERE id = '{id}' RETURNING id;


inwardStock =   WITH update_operation AS ( \
                UPDATE assembly.as_pd_product_stock \
                SET \
                    version = version + 1, \
                    updatedon = NOW(), \
                    createdby = '{createdby}', \
                    currentstock = currentstock + {quantity} \
                WHERE product_id = '{product_id}' \
                RETURNING id \
                ), \
                insert_operation AS ( \
                INSERT INTO assembly.as_pd_product_stock (updatedon, createdby, product_id, currentstock) \
                SELECT NOW(), '{createdby}', '{product_id}', {quantity} \
                WHERE NOT EXISTS (SELECT 1 FROM update_operation) \
                RETURNING id \
                ) \
                SELECT id FROM update_operation \
                UNION ALL \
                SELECT id FROM insert_operation; \


                # WITH existing_record AS ( \
                #     SELECT id FROM assembly.as_pd_product_stock \
                #     WHERE product_id = '{product_id}' \
                # ) \
                # UPDATE assembly.as_pd_product_stock \
                # SET \
                #     version = version+1, \
                #     updatedon = NOW(), \
                #     createdby = '{createdby}', \
                #     currentstock = currentstock + {quantity} \
                # WHERE id = (SELECT id FROM existing_record) \
                # RETURNING id; \
                # INSERT INTO assembly.as_pd_product_stock ( \
                #     createdby, product_id, currentstock \
                # ) \
                # SELECT '{createdby}', '{product_id}', {quantity} \
                # WHERE NOT EXISTS (SELECT 1 FROM existing_record) \
                # RETURNING id; 
