reserveStockOfAssembly =    WITH RECURSIVE stock_calculation AS ( \
                                SELECT aps.id, aps.product_id, (aps.currentstock - COALESCE(SUM(asr.reserve_stock_qty), 0))::numeric(10,3) AS remaining_stock \
                                FROM assembly.as_pd_product_stock aps \
                                LEFT JOIN assembly.as_pd_product_reserveorder asr ON asr.product_id = aps.product_id \
                                GROUP BY aps.product_id, aps.currentstock, aps.id, asr.reserve_stock_qty \
                            ), \
                            product_hierarchy AS ( \
                                SELECT DISTINCT ON (TRIM(pps.id)) \
                                    TRIM(pp.code) AS product, \
                                    TRIM(pp.revisionno) AS revision_number, \
                                    TRIM(pt.name) AS producttype, \
                                    COALESCE(quantity, 0) :: numeric(10,3) AS qty_require_for_one_as, \
                                    COALESCE(sc.remaining_stock, 0) :: numeric(10,3) AS stock, \
                                    ({po_qty} * COALESCE(quantity, 0)) :: numeric(10,3) AS po_qty, \
                                    GREATEST( \
                                        LEAST( \
                                            COALESCE(sc.remaining_stock, 0), \
                                            (({po_qty} * COALESCE(quantity, 0))- COALESCE(scheduled_quantity,0)) \
                                        ) - COALESCE(sum_quantity, 0), \
                                        0 \
                                    ) :: numeric(10,3) AS reserved_stock, \
                                    GREATEST( \
                                        (({po_qty} * COALESCE(quantity, 0))- COALESCE(scheduled_quantity,0)) - LEAST(COALESCE(sc.remaining_stock, 0), \
                                        (({po_qty} * COALESCE(quantity, 0)) - COALESCE(scheduled_quantity,0)) - COALESCE(sum_quantity, 0), \
                                        0 \
                                    )) :: numeric(10,3) AS remaining_qty_to_complete_order, \
                                    TRIM(pps.id) AS stru_table_id, \
                                    TRIM(pp.id) AS child_id, \
                                    pps.level AS level, \
                                    TRIM(pps.parentproduct_id) AS parentproduct_id, \
                                    pps.updatedon AS updatedon, \
                                    pp.producttype AS producttypeid \
                                FROM assembly.as_pd_product_structure pps \
                                LEFT JOIN assembly.as_pd_product pp ON pp.id = pps.childproduct_id \
                                LEFT JOIN assembly.as_producttype pt ON pt.id = pp.producttype \
                                LEFT JOIN stock_calculation sc ON sc.product_id = pps.childproduct_id \
                                LEFT JOIN ( \
                                    SELECT productstock_id, parentproduct_id, sodetails_id, SUM(quantity) AS sum_quantity, stockevent \
                                    FROM assembly.as_pd_product_stockhistory \
                                    GROUP BY productstock_id, parentproduct_id, sodetails_id , stockevent \
                                ) psh ON psh.productstock_id = sc.id AND psh.parentproduct_id = '{product_id}' \
                                    AND psh.sodetails_id = '{so_details_id}' AND stockevent = 'Issue' \
                                LEFT JOIN ( \
                                    SELECT childproduct_id, parentproduct_id, so_details_id, SUM(scheduledquantity) AS scheduled_quantity \
                                    FROM assembly.as_production_schedule \
                                    GROUP BY childproduct_id, parentproduct_id, so_details_id \
                                ) psche ON psche.childproduct_id =  pps.childproduct_id AND psche.parentproduct_id = '{product_id}' AND psche.so_details_id = '{so_details_id}' \
                                WHERE pps.childproduct_id = '{product_id}' AND pps.revisionno = '{revisionno}' AND pps.level = 0 \
                                GROUP BY pp.code, pp.revisionno, pt.name, quantity, sc.remaining_stock, pps.id, pp.id, psh.sum_quantity, scheduled_quantity \
                                UNION ALL \
                                SELECT DISTINCT ON (TRIM(pps.id)) \
                                    TRIM(pp.code) AS product, \
                                    TRIM(pp.revisionno) AS revision_number, \
                                    TRIM(pt.name) AS producttype, \
                                    COALESCE(quantity, 0) :: numeric(10,3) AS qty_require_for_one_as, \
                                    COALESCE(sc.remaining_stock, 0) :: numeric(10,3) AS stock, \
                                    (ph.remaining_qty_to_complete_order * COALESCE(quantity, 0)) :: numeric(10,3) AS po_qty, \
                                    CASE \
                                        WHEN ((ph.remaining_qty_to_complete_order * COALESCE(quantity, 0))- COALESCE(scheduled_quantity,0)) = COALESCE(psh.sum_quantity, 0) \
                                            THEN 0 :: numeric(10,3) \
                                        WHEN sc.remaining_stock < ph.remaining_qty_to_complete_order * COALESCE(quantity, 0) \
                                            THEN GREATEST(LEAST(COALESCE(sc.remaining_stock, 0), ph.remaining_qty_to_complete_order * COALESCE(quantity, 0)), 0) :: numeric(10,3) \
                                        ELSE GREATEST(LEAST(COALESCE(sc.remaining_stock, 0), ph.remaining_qty_to_complete_order * COALESCE(quantity, 0)) \
                                            - COALESCE(psh.sum_quantity, 0), 0) :: numeric(10,3) \
                                    END AS reserved_stock, \
                                    GREATEST((((ph.remaining_qty_to_complete_order * COALESCE(quantity, 0)) - COALESCE(scheduled_quantity,0)) - COALESCE(sc.remaining_stock, 0)) - \
			                        COALESCE(psh.sum_quantity, 0), 0) :: numeric(10,3) AS remaining_qty_to_complete_order, \
                                    TRIM(pps.id) AS stru_table_id, \
                                    TRIM(pp.id) AS child_id, \
                                    pps.level AS level, \
                                    TRIM(pps.parentproduct_id) AS parentproduct_id, \
                                    pps.updatedon AS updatedon, \
                                    pp.producttype AS producttypeid \
                                FROM assembly.as_pd_product_structure pps \
                                LEFT JOIN assembly.as_pd_product pp ON pp.id = pps.childproduct_id \
                                LEFT JOIN assembly.as_producttype pt ON pt.id = pp.producttype \
                                LEFT JOIN stock_calculation sc ON sc.product_id = pps.childproduct_id \
                                LEFT JOIN ( \
                                    SELECT productstock_id, parentproduct_id, sodetails_id, SUM(quantity) AS sum_quantity, stockevent \
                                    FROM assembly.as_pd_product_stockhistory \
                                    GROUP BY productstock_id, parentproduct_id, sodetails_id, stockevent \
                                ) psh ON psh.productstock_id = sc.id AND psh.parentproduct_id = '{product_id}' \
                                    AND psh.sodetails_id = '{so_details_id}'  AND stockevent = 'Issue' \
                                INNER JOIN product_hierarchy ph ON pps.parentproduct_id = ph.stru_table_id::text \
                                LEFT JOIN ( \
                                    SELECT childproduct_id, parentproduct_id, so_details_id, SUM(scheduledquantity) AS scheduled_quantity \
                                    FROM assembly.as_production_schedule \
                                    GROUP BY childproduct_id, parentproduct_id, so_details_id \
                                ) psche ON psche.childproduct_id =  pps.childproduct_id AND psche.parentproduct_id = '{product_id}' AND psche.so_details_id = '{so_details_id}' \
                                WHERE pps.level > ph.level \
                                GROUP BY pp.code, pp.revisionno, pt.name, quantity, sc.remaining_stock, pps.id, pp.id, ph.remaining_qty_to_complete_order, \
	                            psh.sum_quantity, psh.productstock_id, psh.parentproduct_id, psh.sodetails_id, scheduled_quantity \
                            ), \
                            insertion AS ( \
                                INSERT INTO assembly.as_pd_product_reserveorder( \
                                    updatedon, createdby, so_details_id, product_id, po_qty, reserve_stock_qty, tobeproduced_qty, parentproduct_id \
                                ) \
                                SELECT \
                                    NOW(), \
                                    '{createdby}' AS createdby, \
                                    '{so_details_id}' AS so_details_id, \
                                    child_id AS product_id, \
                                    po_qty AS po_qty, \
                                    reserved_stock AS reserve_stock_qty, \
                                    remaining_qty_to_complete_order AS tobeproduced_qty, \
                                    '{product_id}' AS parentproduct_id \
                                FROM product_hierarchy  WHERE EXISTS (SELECT 1 FROM product_hierarchy) RETURNING * \
                            ) \
                            SELECT \
                                CASE \
                                    WHEN EXISTS (SELECT * FROM product_hierarchy) \
                                    THEN (SELECT STRING_AGG(product, ', ') FROM product_hierarchy) \
                                    ELSE 'No record found' \
                                END AS result; \


                            # WITH RECURSIVE stock_calculation AS ( \
                            #     SELECT aps.id, aps.product_id, (aps.currentstock - COALESCE(SUM(asr.reserve_stock_qty), 0))::numeric(10,3) AS remaining_stock \
                            #     FROM assembly.as_pd_product_stock aps \
                            #     LEFT JOIN assembly.as_pd_product_reserveorder asr ON asr.product_id = aps.product_id \
                            #     GROUP BY aps.product_id, aps.currentstock, aps.id, asr.reserve_stock_qty \
                            # ), \
                            # product_hierarchy AS ( \
                            #     SELECT DISTINCT ON (TRIM(pps.id)) \
                            #         TRIM(pp.code) AS product, \
                            #         TRIM(pp.revisionno) AS revision_number, \
                            #         TRIM(pt.name) AS producttype, \
                            #         COALESCE(quantity, 0) :: numeric(10,3) AS qty_require_for_one_as, \
                            #         COALESCE(sc.remaining_stock, 0) :: numeric(10,3) AS stock, \
                            #         ({po_qty} * COALESCE(quantity, 0)) :: numeric(10,3) AS po_qty, \
                            #         GREATEST(LEAST(COALESCE(sc.remaining_stock, 0), {po_qty} * COALESCE(quantity, 0)) - COALESCE(sum_quantity, 0),0) :: numeric(10,3) AS reserved_stock, \
                            #         GREATEST(({po_qty} * COALESCE(quantity, 0)) - LEAST(COALESCE(sc.remaining_stock, 0), {po_qty} * COALESCE(quantity, 0)) - COALESCE(sum_quantity, 0), 0) :: numeric(10,3) AS remaining_qty_to_complete_order, \
                            #         TRIM(pps.id) AS stru_table_id, \
                            #         TRIM(pp.id) AS child_id, \
                            #         pps.level AS level, \
                            #         TRIM(pps.parentproduct_id) AS parentproduct_id, \
                            #         pps.updatedon AS updatedon, \
                            #         pp.producttype AS producttypeid \
                            #     FROM assembly.as_pd_product_structure pps \
                            #     LEFT JOIN assembly.as_pd_product pp ON pp.id = pps.childproduct_id \
                            #     LEFT JOIN assembly.as_producttype pt ON pt.id = pp.producttype \
                            #     LEFT JOIN stock_calculation sc ON sc.product_id = pps.childproduct_id \
                            #     LEFT JOIN \
                            #         ( \
                            #             SELECT \
                            #                 productstock_id, \
                            #                 parentproduct_id, \
                            #                 sodetails_id, \
                            #                 SUM(quantity) AS sum_quantity \
                            #             FROM assembly.as_pd_product_stockhistory \
                            #             GROUP BY productstock_id, parentproduct_id, sodetails_id \
                            #         ) psh ON psh.productstock_id = sc.id AND psh.parentproduct_id = '{product_id}' AND psh.sodetails_id = '{so_details_id}' \
                            #     WHERE pps.childproduct_id = '{product_id}' AND pps.revisionno = '{revisionno}' AND pps.level = 0 \
                            #     GROUP BY pp.code, pp.revisionno, pt.name, quantity, sc.remaining_stock, pps.id, pp.id, psh.sum_quantity \
                            #     UNION ALL \
                            #     SELECT DISTINCT ON (TRIM(pps.id)) \
                            #         TRIM(pp.code) AS product, \
                            #         TRIM(pp.revisionno) AS revision_number, \
                            #         TRIM(pt.name) AS producttype, \
                            #         COALESCE(quantity, 0) :: numeric(10,3) AS qty_require_for_one_as, \
                            #         COALESCE(sc.remaining_stock, 0) :: numeric(10,3) AS stock, \
                            #         (ph.remaining_qty_to_complete_order * COALESCE(quantity, 0)) :: numeric(10,3) AS po_qty, \
                            #         CASE \
                            #             WHEN (ph.remaining_qty_to_complete_order * COALESCE(quantity, 0)) = COALESCE(psh.sum_quantity, 0) THEN 0 :: numeric(10,3) \
                            #             WHEN sc.remaining_stock < ph.remaining_qty_to_complete_order * COALESCE(quantity, 0) \
                            #             THEN GREATEST(LEAST(COALESCE(sc.remaining_stock, 0), ph.remaining_qty_to_complete_order * COALESCE(quantity, 0)), 0) :: numeric(10,3) \
                            #             ELSE GREATEST(LEAST(COALESCE(sc.remaining_stock, 0), ph.remaining_qty_to_complete_order * COALESCE(quantity, 0)) - COALESCE(psh.sum_quantity, 0), 0) :: numeric(10,3) \
                            #         END AS reserved_stock, \
                            #         GREATEST(((ph.remaining_qty_to_complete_order * COALESCE(quantity, 0)) - COALESCE(sc.remaining_stock, 0))- COALESCE(psh.sum_quantity, 0), 0) :: numeric(10,3) AS remaining_qty_to_complete_order, \
                            #         TRIM(pps.id) AS stru_table_id, \
                            #         TRIM(pp.id) AS child_id, \
                            #         pps.level AS level, \
                            #         TRIM(pps.parentproduct_id) AS parentproduct_id, \
                            #         pps.updatedon AS updatedon, \
                            #         pp.producttype AS producttypeid \
                            #     FROM assembly.as_pd_product_structure pps \
                            #     LEFT JOIN assembly.as_pd_product pp ON pp.id = pps.childproduct_id \
                            #     LEFT JOIN assembly.as_producttype pt ON pt.id = pp.producttype \
                            #     LEFT JOIN stock_calculation sc ON sc.product_id = pps.childproduct_id \
                            #     LEFT JOIN \
                            #         ( \
                            #             SELECT \
                            #                 productstock_id, \
                            #                 parentproduct_id, \
                            #                 sodetails_id, \
                            #                 SUM(quantity) AS sum_quantity \
                            #             FROM assembly.as_pd_product_stockhistory \
                            #             GROUP BY productstock_id, parentproduct_id, sodetails_id \
                            #         ) psh ON psh.productstock_id = sc.id AND psh.parentproduct_id = '{product_id}' AND psh.sodetails_id = '{so_details_id}' \
                            #     INNER JOIN product_hierarchy ph ON pps.parentproduct_id = ph.stru_table_id::text \
                            #     WHERE pps.level > ph.level \
                            #     GROUP BY pp.code, pp.revisionno, pt.name, quantity, sc.remaining_stock, pps.id, pp.id, ph.remaining_qty_to_complete_order, \
	                        #     psh.sum_quantity, psh.productstock_id, psh.parentproduct_id, psh.sodetails_id \
                            # ), \
                            # insertion AS ( \
                            #     INSERT INTO assembly.as_pd_product_reserveorder( \
                            #         updatedon, createdby, so_details_id, product_id, po_qty, reserve_stock_qty, tobeproduced_qty, parentproduct_id \
                            #     ) \
                            #     SELECT \
                            #         NOW(), \
                            #         '{createdby}' AS createdby, \
                            #         '{so_details_id}' AS so_details_id, \
                            #         child_id AS product_id, \
                            #         po_qty AS po_qty, \
                            #         reserved_stock AS reserve_stock_qty, \
                            #         remaining_qty_to_complete_order AS tobeproduced_qty, \
                            #         '{product_id}' AS parentproduct_id \
                            #     FROM product_hierarchy  WHERE EXISTS (SELECT 1 FROM product_hierarchy) RETURNING * \
                            # ) \
                            # SELECT \
                            #     CASE \
                            #         WHEN EXISTS (SELECT * FROM product_hierarchy) \
                            #         THEN (SELECT STRING_AGG(product, ', ') FROM product_hierarchy) \
                            #         ELSE 'No record found' \
                            #     END AS result; \

reserveStockOfPart =    WITH stock_calculation AS ( \
                            SELECT \
                                aps.id, aps.product_id, \
                                aps.currentstock - COALESCE(SUM(asr.reserve_stock_qty), 0) AS reserved_stock_qty, \
                                CASE \
                                    WHEN aps.currentstock > ({po_qty} - ((COALESCE(SUM(sch.scheduledquantity), 0)) + COALESCE(SUM(asr.reserve_stock_qty), 0))) \
                                    THEN 0 \
                                    WHEN ({po_qty} - ((COALESCE(SUM(sch.scheduledquantity), 0)) + COALESCE(SUM(asr.reserve_stock_qty), 0))) > aps.currentstock \
                                    THEN ({po_qty} - ((COALESCE(SUM(sch.scheduledquantity), 0)) + COALESCE(SUM(asr.reserve_stock_qty), 0))) \
                                    ELSE aps.currentstock - ({po_qty} - ((COALESCE(SUM(sch.scheduledquantity), 0)) + COALESCE(SUM(asr.reserve_stock_qty), 0))) \
                                END AS tobeproduced_qty \
                            FROM assembly.as_pd_product_stock aps \
                            LEFT JOIN assembly.as_pd_product_reserveorder asr ON asr.product_id = aps.product_id \
                            LEFT JOIN assembly.as_production_schedule sch ON sch.childproduct_id = aps.product_id AND sch.parentproduct_id = '{product_id}' \
                            AND sch.so_details_id = '{so_details_id}' \
                            WHERE aps.product_id = '{product_id}' \
                            GROUP BY aps.product_id, aps.currentstock, aps.id \
                        ), \
                        insertion AS ( \
                            INSERT INTO assembly.as_pd_product_reserveorder( \
                                updatedon, \
                                createdby, \
                                so_details_id, \
                                product_id, \
                                po_qty, \
                                reserve_stock_qty, \
                                tobeproduced_qty, \
                                parentproduct_id \
                            ) \
                            SELECT \
                                NOW() AS updatedon, \
                                '{createdby}' AS createdby, \
                                '{so_details_id}' AS so_details_id, \
                                product_id, {po_qty} AS po_qty, \
                                CASE \
                                    WHEN stock_calculation.reserved_stock_qty >=  {po_qty} \
                                    THEN GREATEST( {po_qty} - COALESCE(SUM(psh.issued_quantity), 0), 0) \
                                    WHEN stock_calculation.reserved_stock_qty <  {po_qty} AND stock_calculation.reserved_stock_qty < \
                                        GREATEST( {po_qty} - COALESCE(SUM(psh.issued_quantity), 0), 0) \
                                    THEN stock_calculation.reserved_stock_qty \
                                    WHEN stock_calculation.reserved_stock_qty < {po_qty} \
                                        THEN GREATEST( {po_qty} - COALESCE(SUM(psh.issued_quantity), 0), 0) \
                                    ELSE GREATEST(stock_calculation.reserved_stock_qty, 0) \
                                END AS reserve_stock_qty, \
                                GREATEST(stock_calculation.tobeproduced_qty - COALESCE(SUM(psh.issued_quantity), 0),0) AS tobeproduced_qty, \
                                '{product_id}' AS parentproduct_id \
                            FROM stock_calculation \
                            LEFT JOIN ( \
                                SELECT productstock_id, parentproduct_id, sodetails_id, SUM(quantity) AS issued_quantity \
                                FROM assembly.as_pd_product_stockhistory \
                                GROUP BY productstock_id, parentproduct_id, sodetails_id \
                            )psh ON psh.productstock_id = stock_calculation.id AND psh.parentproduct_id = '{product_id}' \
                                AND psh.sodetails_id = '{so_details_id}' \
                            WHERE EXISTS (SELECT 1 FROM stock_calculation) \
                            GROUP BY product_id, stock_calculation.reserved_stock_qty, stock_calculation.tobeproduced_qty \
                            UNION ALL \
                            SELECT \
                                NOW() AS updatedon, \
                                '{createdby}' AS createdby, \
                                '{so_details_id}' AS so_details_id, \
                                '{product_id}' AS product_id, \
                                {po_qty} AS po_qty, \
                                0 AS reserve_stock_qty, \
                                {po_qty} AS tobeproduced_qty, \
                                '{product_id}' AS parentproduct_id \
                            WHERE NOT EXISTS (SELECT 1 FROM stock_calculation) RETURNING * ) \
                        SELECT id as result \
                        FROM insertion;
                        
                        # WITH stock_calculation AS ( \
                        #     SELECT aps.id, \
                        #     aps.product_id, \
                        #     aps.currentstock - COALESCE(SUM(asr.reserve_stock_qty), 0) AS reserved_stock_qty, \
                        #     CASE \
                        #         WHEN aps.currentstock - COALESCE(SUM(asr.reserve_stock_qty), 0) >= {po_qty} \
                        #             THEN 0 \
                        #         ELSE  {po_qty} - (aps.currentstock - COALESCE(SUM(asr.reserve_stock_qty), 0)) \
                        #     END AS tobeproduced_qty \
                        #     FROM assembly.as_pd_product_stock aps \
                        #     LEFT JOIN assembly.as_pd_product_reserveorder asr ON asr.product_id = aps.product_id \
                        #     WHERE aps.product_id = '{product_id}' \
                        #     GROUP BY aps.product_id, aps.currentstock, aps.id \
                        # ), \
                        # insertion AS ( \
                        #     INSERT INTO assembly.as_pd_product_reserveorder( \
                        #         updatedon, createdby, so_details_id, product_id, po_qty, reserve_stock_qty, tobeproduced_qty, parentproduct_id \
                        #     ) \
                        #     SELECT \
                        #         NOW() AS updatedon, \
                        #         '{createdby}' AS createdby, \
                        #         '{so_details_id}' AS so_details_id, \
                        #         product_id, \
                        #         {po_qty} AS po_qty, \
                        #         CASE \
                        #             WHEN stock_calculation.reserved_stock_qty >=  {po_qty} \
                        #                 THEN GREATEST( {po_qty} - COALESCE(SUM(psh.issued_quantity), 0), 0) \
                        #             WHEN stock_calculation.reserved_stock_qty <  {po_qty} AND stock_calculation.reserved_stock_qty < GREATEST( {po_qty} - COALESCE(SUM(psh.issued_quantity), 0), 0) \
                        #                 THEN stock_calculation.reserved_stock_qty \
                        #             WHEN stock_calculation.reserved_stock_qty < {po_qty} \
                        #                 THEN GREATEST( {po_qty} - COALESCE(SUM(psh.issued_quantity), 0), 0) \
                        #             ELSE GREATEST(stock_calculation.reserved_stock_qty, 0) \
                        #         END AS reserve_stock_qty, \
                        #         GREATEST(COALESCE(stock_calculation.tobeproduced_qty - COALESCE(SUM(psh.issued_quantity), 0), 0),0) AS tobeproduced_qty, \
                        #         '{product_id}' AS parentproduct_id \
                        #     FROM stock_calculation \
                        #     LEFT JOIN ( \
                        #         SELECT productstock_id, parentproduct_id, sodetails_id, SUM(quantity) AS issued_quantity \
                        #         FROM assembly.as_pd_product_stockhistory \
                        #         GROUP BY productstock_id, parentproduct_id, sodetails_id \
                        #     )psh ON psh.productstock_id = stock_calculation.id \
                        #     AND psh.parentproduct_id = '{product_id}' AND psh.sodetails_id = '{so_details_id}' \
                        #     LEFT JOIN ( \
                        #         SELECT childproduct_id, parentproduct_id, so_details_id, SUM(scheduledquantity) AS scheduled_quantity \
                        #         FROM assembly.as_production_schedule \
                        #         GROUP BY childproduct_id, parentproduct_id, so_details_id \
                        #     ) apsche ON  apsche.childproduct_id = product_id AND apsche.parentproduct_id= '{product_id}' AND apsche.so_details_id = '{so_details_id}' \
                        #     WHERE EXISTS (SELECT 1 FROM stock_calculation) \
                        #     GROUP BY product_id, stock_calculation.reserved_stock_qty, stock_calculation.tobeproduced_qty \
                        #     UNION ALL \
                        #     SELECT \
                        #         NOW() AS updatedon, \
                        #         '{createdby}' AS createdby, \
                        #         '{so_details_id}' AS so_details_id, \
                        #         '{product_id}' AS product_id, \
                        #         {po_qty} AS po_qty, \
                        #         0 AS reserve_stock_qty, \
                        #         {po_qty} AS tobeproduced_qty, \
                        #         '{product_id}' \
                        #         AS parentproduct_id \
                        #     WHERE NOT EXISTS (SELECT 1 FROM stock_calculation) RETURNING * ) \
                        # SELECT id as result \
                        # FROM insertion;

                    # WITH stock_calculation AS ( \
                    #     SELECT \
                    #         aps.id, \
                    #         aps.product_id, \
                    #         aps.currentstock - COALESCE(SUM(asr.reserve_stock_qty), 0) AS reserved_stock_qty, \
                    #         CASE \
                    #             WHEN aps.currentstock - COALESCE(SUM(asr.reserve_stock_qty), 0) >= {po_qty} THEN 0 \
                    #             ELSE {po_qty} - (aps.currentstock - COALESCE(SUM(asr.reserve_stock_qty), 0)) \
                    #         END AS tobeproduced_qty \
                    #     FROM assembly.as_pd_product_stock aps \
                    #     LEFT JOIN assembly.as_pd_product_reserveorder asr ON asr.product_id = aps.product_id \
                    #     WHERE aps.product_id = '{product_id}' \
                    #     GROUP BY aps.product_id, aps.currentstock, aps.id \
                    # ), \
                    # insertion AS ( \
                    #     INSERT INTO assembly.as_pd_product_reserveorder( \
                    #         updatedon, createdby, so_details_id, product_id, po_qty, reserve_stock_qty, tobeproduced_qty, parentproduct_id \
                    #     ) \
                    #     SELECT \
                    #         NOW() AS updatedon, \
                    #         '{createdby}' AS createdby, \
                    #         '{so_details_id}' AS so_details_id, \
                    #         product_id, \
                    #         {po_qty} AS po_qty, \
                    #         CASE \
                    #             WHEN stock_calculation.reserved_stock_qty >= {po_qty} THEN GREATEST({po_qty} - COALESCE(SUM(psh.quantity), 0), 0) \
                    #             WHEN stock_calculation.reserved_stock_qty < {po_qty} AND stock_calculation.reserved_stock_qty < GREATEST({po_qty} - COALESCE(SUM(psh.quantity), 0), 0) THEN stock_calculation.reserved_stock_qty \
                    #             WHEN stock_calculation.reserved_stock_qty < {po_qty} THEN GREATEST({po_qty} - COALESCE(SUM(psh.quantity), 0), 0) \
                    #             ELSE GREATEST(stock_calculation.reserved_stock_qty, 0) \
                    #         END AS reserve_stock_qty, \
                    #         GREATEST(COALESCE(stock_calculation.tobeproduced_qty - COALESCE(SUM(psh.quantity), 0), 0),0) AS tobeproduced_qty, \
                    #         '{product_id}' AS parentproduct_id \
                    #     FROM stock_calculation \
                    #     LEFT JOIN assembly.as_pd_product_stockhistory psh ON psh.productstock_id = stock_calculation.id \
                    #     AND psh.parentproduct_id = '{product_id}' AND psh.sodetails_id = '{so_details_id}' \
                    #     WHERE EXISTS (SELECT 1 FROM stock_calculation) \
                    #     GROUP BY product_id, stock_calculation.reserved_stock_qty, stock_calculation.tobeproduced_qty \
                    #     UNION ALL \
                    #     SELECT \
                    #         NOW() AS updatedon, \
                    #         '{createdby}' AS createdby, \
                    #         '{so_details_id}' AS so_details_id, \
                    #         '{product_id}' AS product_id, \
                    #         {po_qty} AS po_qty, \
                    #         0 AS reserve_stock_qty, \
                    #         {po_qty} AS tobeproduced_qty, \
                    #         '{product_id}' AS parentproduct_id \
                    #     WHERE NOT EXISTS (SELECT 1 FROM stock_calculation) \
                    #     RETURNING * \
                    # ) \
                    # SELECT id as result FROM insertion;

reservedStock = WITH distinct_so_details AS ( \
                    SELECT DISTINCT ON (pro.so_details_id) \
                    so_details_id, \
                    (SELECT po_qty FROM assembly.as_pd_product_reserveorder \
                    WHERE parentproduct_id = pro.parentproduct_id \
                    AND so_details_id = pro.so_details_id LIMIT 1) AS quantity, \
                    pro.updatedon \
                    FROM assembly.as_pd_product_reserveorder pro \
                    JOIN assembly.as_pd_product_salesorderdetails psod ON psod.id = pro.so_details_id \
                    JOIN assembly.as_pd_product_salesorders pso ON pso.id = psod.so_id \
                    ORDER BY pro.so_details_id, pso.referencedocumentnumber \
                ) \
                SELECT so_details_id, quantity FROM distinct_so_details ORDER BY updatedon ASC;

unreserveStock =    DO $$ \
                    DECLARE \
                        new_parentproduct_id VARCHAR := '{product_id}'; \
                        new_so_details_id VARCHAR := '{so_details_id}'; \
                        unreserve_product RECORD; \
                        product_data RECORD; \
                        reserved_stock_quantity RECORD; \
                        reserved_quantity INTEGER; \
                        tobe_produce_quantity INTEGER; \
                        cur_product CURSOR FOR \
                            SELECT pro.product_id, \
                                aps.currentstock, \
                                pro.so_details_id, \
                                pro.parentproduct_id \
                            FROM assembly.as_pd_product_reserveorder pro \
                            JOIN assembly.as_pd_product_stock aps ON aps.product_id = pro.product_id \
                            WHERE pro.parentproduct_id = new_parentproduct_id \
                            AND so_details_id = new_so_details_id \
                            ORDER BY pro.updatedon DESC; \
                    BEGIN \
                        OPEN cur_product; \
                        LOOP \
                            FETCH cur_product INTO unreserve_product; \
                            EXIT WHEN NOT FOUND; \
                            UPDATE assembly.as_pd_product_reserveorder \
                            SET reserve_stock_qty = 0, \
                            tobeproduced_qty = 0 \
                            WHERE product_id = unreserve_product.product_id; \
                            FOR product_data IN \
                                SELECT Id \
                                FROM assembly.as_pd_product_reserveorder \
                                WHERE product_id = unreserve_product.product_id \
                                AND so_details_id != new_so_details_id \
                                ORDER BY updatedon ASC \
                            LOOP \
                                reserved_quantity := ( \
                                    SELECT COALESCE(SUM(reserve_stock_qty),0) \
                                    FROM assembly.as_pd_product_reserveorder \
                                    WHERE product_id = unreserve_product.product_id \
                                    AND so_details_id != new_so_details_id \
                                ); \
                                SELECT DISTINCT \
                                    psr.po_qty AS po_quantity, \
                                    COALESCE(SUM(psr.reserve_stock_qty),0) AS reserved_quantity, \
                                    COALESCE(SUM(psh.quantity),0) AS issued_quantity \
                                INTO \
                                    reserved_stock_quantity \
                                FROM \
                                    assembly.as_pd_product_reserveorder psr \
                                JOIN \
                                    assembly.as_pd_product_stock ps ON ps.product_id = psr.product_id \
                                LEFT JOIN \
                                    assembly.as_pd_product_stockhistory psh ON psh.productstock_id = ps.id \
                                    AND psh.parentproduct_id = psr.parentproduct_id \
                                    AND psh.sodetails_id = psr.so_details_id \
                                WHERE \
                                    psr.id = product_data.id \
                                GROUP BY \
                                    psr.po_qty; \
                                tobe_produce_quantity := GREATEST(((reserved_stock_quantity.po_quantity - reserved_stock_quantity.issued_quantity) - reserved_quantity),0); \
                                IF reserved_stock_quantity IS NOT NULL THEN \
                                    UPDATE assembly.as_pd_product_reserveorder \
                                    SET \
                                        updatedon = NOW(), \
                                        version = version + 1, \
                                        reserve_stock_qty = CASE \
                                                                WHEN unreserve_product.currentstock > tobe_produce_quantity \
                                                                THEN GREATEST(reserved_stock_quantity.po_quantity - (reserved_stock_quantity.issued_quantity + reserved_stock_quantity.reserved_quantity),0) \
                                                                WHEN unreserve_product.currentstock <= tobe_produce_quantity \
                                                                THEN GREATEST(unreserve_product.currentstock - reserved_quantity, 0) \
                                                                ELSE GREATEST((reserved_stock_quantity.po_quantity - reserved_stock_quantity.issued_quantity), 0) \
                                                            END, \
                                        tobeproduced_qty = CASE \
                                                                WHEN unreserve_product.currentstock > tobe_produce_quantity THEN 0 \
                                                                WHEN unreserve_product.currentstock <= tobe_produce_quantity THEN \
                                                                    GREATEST(reserved_stock_quantity.po_quantity - (reserved_stock_quantity.issued_quantity + (unreserve_product.currentstock - reserved_quantity)),0) \
                                                                ELSE \
                                                                    GREATEST(((reserved_stock_quantity.po_quantity - reserved_stock_quantity.issued_quantity) - reserved_stock_quantity.reserved_quantity) ,0) \
                                                            END \
                                    WHERE id = product_data.id; \
                                END IF; \
                            END LOOP; \
                        END LOOP; \
                        CLOSE cur_product; \
                        DELETE FROM assembly.as_pd_product_reserveorder \
                        WHERE \
                            parentproduct_id = new_parentproduct_id \
                        AND \
                            so_details_id = new_so_details_id; \
                    END; \
                    $$;

unreserveStockWithStructure = WITH RECURSIVE product_hierarchy AS ( \
                SELECT DISTINCT ON (TRIM(pps.id)) \
                    TRIM(pp.code) AS product, \
                    TRIM(pp.revisionno) AS revision_number, \
                    TRIM(pt.name) AS producttype, \
                    COALESCE(quantity, 0) AS qty_require_for_one_as, \
                    COALESCE(aps.currentstock, 0) AS stock, \
                    LEAST(COALESCE(aps.currentstock, 0), {po_qty} * COALESCE(quantity, 0)) AS reserved_stock, \
                    GREATEST(({po_qty} * COALESCE(quantity, 0)) - LEAST(COALESCE(aps.currentstock, 0), {po_qty} * COALESCE(quantity, 0)), 0) AS remaining_qty_to_complete_order, \
                    TRIM(pps.id) AS stru_table_id, \
                    TRIM(pp.id) AS child_id, \
                    pps.level AS level, \
                    TRIM(pps.parentproduct_id) AS parentproduct_id, \
                    pps.updatedon AS updatedon, \
                    pp.producttype AS producttypeid \
                FROM assembly.as_pd_product_structure pps \
                LEFT JOIN assembly.as_pd_product pp ON pp.id = pps.childproduct_id \
                LEFT JOIN assembly.as_producttype pt ON pt.id = pp.producttype \
                LEFT JOIN assembly.as_pd_product_stock aps ON aps.product_id = pps.childproduct_id \
                WHERE pps.childproduct_id = '{product_id}' AND pps.revisionno = '{revisionno}' \
                UNION ALL \
                SELECT DISTINCT ON (TRIM(pps.id)) \
                    TRIM(pp.code) AS product, \
                    TRIM(pp.revisionno) AS revision_number, \
                    TRIM(pt.name) AS producttype, \
                    COALESCE(quantity, 0) AS qty_require_for_one_as, \
                    COALESCE(aps.currentstock, 0) AS stock, \
                    LEAST(COALESCE(aps.currentstock, 0), ph.remaining_qty_to_complete_order * COALESCE(quantity, 0)) AS reserved_stock, \
                    GREATEST(((ph.remaining_qty_to_complete_order * COALESCE(quantity, 0)) - COALESCE(aps.currentstock, 0)), 0) AS remaining_qty_to_complete_order, \
                    TRIM(pps.id) AS stru_table_id, \
                    TRIM(pp.id) AS child_id, \
                    pps.level AS level, \
                    TRIM(pps.parentproduct_id) AS parentproduct_id, \
                    pps.updatedon AS updatedon, \
                    pp.producttype AS producttypeid \
                FROM assembly.as_pd_product_structure pps \
                LEFT JOIN assembly.as_pd_product pp ON pp.id = pps.childproduct_id \
                LEFT JOIN assembly.as_producttype pt ON pt.id = pp.producttype \
                LEFT JOIN assembly.as_pd_product_stock aps ON aps.product_id = pps.childproduct_id \
                INNER JOIN product_hierarchy ph ON pps.parentproduct_id = ph.stru_table_id::text \
                WHERE pps.level > ph.level \
            ), \
            deletion AS ( \
                DELETE FROM assembly.as_pd_product_reserveorder \
                WHERE product_id IN (SELECT child_id FROM product_hierarchy) \
                RETURNING id \
            ) \
            SELECT id FROM deletion;

tobeProductQuantityToCompleteOrder = WITH stock_history_uom AS ( \
                                        SELECT \
                                            apsh.productstock_id, \
                                            apsh.parentproduct_id, \
                                            apsh.sodetails_id, \
                                            apsh.stockevent, \
                                            COALESCE(MAX(apsh.uom_id), rasp.uom_id) AS uom_id, \
                                            uom.code \
                                        FROM assembly.as_pd_product_stockhistory apsh \
                                        LEFT JOIN assembly.as_pd_product rasp ON apsh.productstock_id = rasp.id \
                                        LEFT JOIN data.cm_uom uom ON uom.id = rasp.uom_id \
                                        WHERE apsh.productionschedule_id IS NULL \
                                        GROUP BY apsh.productstock_id, apsh.parentproduct_id, apsh.sodetails_id, rasp.uom_id, apsh.stockevent, uom.code \
                                    ) \
                                    SELECT \
                                        TRIM(rasp.code) AS product, \
                                        rasp.revisionno, \
                                        TRIM(rasp.description) AS description, \
                                        ARRAY_AGG( \
                                            TRIM(lasp.code) \
                                            ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                        ) AS parent, \
                                        ARRAY_AGG( \
                                            TRIM(aso.referencedocumentnumber) \
                                            ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                        ) AS referencedocumentnumber, \
                                        ARRAY_AGG( \
                                            CAST(pro.po_qty AS text) \
                                            ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                        ) AS po_qty, \
                                        CAST(COALESCE(aps.currentstock, 0) AS text) AS stock, \
                                        assembly.convert_quantity_in_specific_uom( \
                                            COALESCE(aps.currentstock, 0), rasp.uom_id, sh_uom.uom_id \
                                        ) AS modified_stock, \
                                        ARRAY_AGG( \
                                            COALESCE( \
                                                ( \
                                                    SELECT SUM(quantity)::numeric(10,3) \
                                                    FROM assembly.as_pd_product_stockhistory apsh \
                                                    WHERE apsh.productstock_id = aps.id AND apsh.parentproduct_id = pro.parentproduct_id \
                                                    AND apsh.sodetails_id = asod.id AND productionschedule_id IS NULL AND deleted = false \
                                                ), \
                                                0 \
                                            )::text ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                        ) AS issued_stock, \
                                        ARRAY_AGG( \
                                            CAST(pro.reserve_stock_qty AS text) \
                                            ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                        ) AS reserved_stock, \
                                        ARRAY_AGG( \
                                            CAST(pro.tobeproduced_qty AS text) \
                                            ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                        ) AS tobeproduced_qty, \
                                        CAST( \
                                            GREATEST( CAST(COALESCE(aps.currentstock, 0) AS numeric(10,3)) - CAST(SUM(pro.reserve_stock_qty) AS numeric(10,3)), 0 ) AS text \
                                        ) AS remaining_stock, \
                                        CASE \
                                            WHEN sh_uom.code IS NULL THEN suom.code \
                                            ELSE sh_uom.code \
                                        END AS unit_of_measurement, \
                                        pro.product_id, \
                                        ARRAY_AGG( \
                                            pro.parentproduct_id \
                                            ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                        ) AS parentproduct_id, \
                                        ARRAY_AGG( \
                                            pro.so_details_id \
                                            ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                        ) AS so_details_id, \
                                        ( \
                                            SELECT DISTINCT aps2.id \
                                            FROM assembly.as_pd_product_stock aps2 \
                                            WHERE aps2.product_id = pro.product_id \
                                        ) AS stock_id, \
                                        ARRAY_AGG( \
                                            pro.id \
                                            ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                        ) AS reserve_table_id, \
                                        ARRAY_AGG( \
                                            CASE \
                                                WHEN ( \
                                                    SELECT SUM(quantity) \
                                                    FROM assembly.as_pd_product_stockhistory apsh \
                                                    WHERE apsh.productstock_id = aps.id AND apsh.parentproduct_id = pro.parentproduct_id \
                                                    AND apsh.sodetails_id = asod.id AND productionschedule_id IS NULL AND deleted = false \
                                                ) >= pro.po_qty \
                                                THEN 'Issued' \
                                                WHEN pro.po_qty > 0 AND aps.currentstock >= pro.po_qty \
                                                THEN 'True' \
                                                WHEN pro.po_qty > 0 AND pro.reserve_stock_qty = aps.currentstock AND pro.tobeproduced_qty = 0 AND pro.reserve_stock_qty != 0 \
                                                THEN 'True' \
                                                ELSE 'False' \
                                            END \
                                            ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                        ) AS enough_stock, \
                                        rasp.uom_id AS product_uom_id, \
                                        sh_uom.uom_id AS stock_history_uom_id, \
                                        ARRAY_AGG( \
                                            CASE \
                                                WHEN EXISTS ( \
                                                    SELECT 1 \
                                                    FROM assembly.as_production_status aps \
                                                    JOIN data.wr_workcentre_workstation ws ON ws.id = aps.workstation_id \
                                                    JOIN assembly.as_production_schedule sch ON aps.productionschedule_id = sch.id \
                                                    WHERE sch.childproduct_id = pro.product_id \
                                                    AND sch.parentproduct_id = pro.parentproduct_id \
                                                    AND sch.so_details_id = asod.id \
                                                    AND ws.wr_workcentre_id = '4028817165f0a36c0165f0a9020e0005' \
                                                ) \
                                                 THEN ( \
                                                    SELECT COALESCE(SUM(scheduledquantity), 0) - COALESCE(SUM(producedquantity), 0) \
                                                    FROM assembly.as_production_schedule sch \
                                                    LEFT JOIN assembly.as_production_status aps ON aps.productionschedule_id = sch.id \
                                                    LEFT JOIN data.wr_workcentre_workstation ws ON ws.id = aps.workstation_id \
                                                    WHERE sch.childproduct_id = pro.product_id \
                                                    AND sch.parentproduct_id = pro.parentproduct_id \
                                                    AND sch.so_details_id = asod.id \
                                                ) \
                                                ELSE ( \
                                                    SELECT COALESCE(SUM(scheduledquantity), 0) \
                                                    FROM assembly.as_production_schedule sch \
                                                    WHERE sch.childproduct_id = pro.product_id \
                                                    AND sch.parentproduct_id = pro.parentproduct_id \
                                                    AND sch.so_details_id = asod.id \
                                                ) \
                                            END \
                                        ) AS scheduled_quantity \
                                    FROM assembly.as_pd_product_reserveorder pro \
                                    LEFT JOIN assembly.as_pd_product rasp ON rasp.id = pro.product_id \
                                    LEFT JOIN assembly.as_pd_product_stock aps ON aps.product_id = pro.product_id \
                                    LEFT JOIN assembly.as_pd_product lasp ON lasp.id = pro.parentproduct_id \
                                    LEFT JOIN assembly.as_pd_product_salesorderdetails asod ON asod.id = pro.so_details_id \
                                    LEFT JOIN assembly.as_pd_product_salesorders aso ON aso.id = asod.so_id \
                                    LEFT JOIN stock_history_uom sh_uom ON sh_uom.productstock_id = aps.id \
                                    AND sh_uom.parentproduct_id = pro.parentproduct_id AND sh_uom.sodetails_id = asod.id AND sh_uom.stockevent = 'Issue' \
                                    LEFT JOIN data.cm_uom suom ON suom.id = rasp.uom_id \
                                    GROUP BY rasp.code, rasp.revisionno, pro.product_id, aps.currentstock, rasp.description, rasp.uom_id, suom.code, sh_uom.uom_id, sh_uom.code \
                                    ORDER BY SUM(pro.tobeproduced_qty) DESC; \

                                    # WITH stock_history_uom AS ( \
                                    #     SELECT \
                                    #         apsh.productstock_id, \
                                    #         apsh.parentproduct_id, \
                                    #         apsh.sodetails_id, \
                                    #         apsh.stockevent, \
                                    #         COALESCE(MAX(apsh.uom_id), rasp.uom_id) AS uom_id, \
                                    #         uom.code \
                                    #     FROM assembly.as_pd_product_stockhistory apsh \
                                    #     LEFT JOIN assembly.as_pd_product rasp ON apsh.productstock_id = rasp.id \
                                    #     LEFT JOIN data.cm_uom uom ON uom.id = rasp.uom_id \
                                    #     WHERE apsh.productionschedule_id IS NULL \
                                    #     GROUP BY apsh.productstock_id, apsh.parentproduct_id, apsh.sodetails_id, rasp.uom_id, apsh.stockevent, uom.code \
                                    # ) \
                                    # SELECT \
                                    #     TRIM(rasp.code) AS product, \
                                    #     rasp.revisionno, \
                                    #     TRIM(rasp.description) AS description, \
                                    #     ARRAY_AGG( \
                                    #         TRIM(lasp.code) \
                                    #         ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                    #     ) AS parent, \
                                    #     ARRAY_AGG( \
                                    #         TRIM(aso.referencedocumentnumber) \
                                    #         ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                    #     ) AS referencedocumentnumber, \
                                    #     ARRAY_AGG( \
                                    #         CAST(pro.po_qty AS text) \
                                    #         ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                    #     ) AS po_qty, \
                                    #     CAST(COALESCE(aps.currentstock, 0) AS text) AS stock, \
                                    #     assembly.convert_quantity_in_specific_uom( \
                                    #         COALESCE(aps.currentstock, 0), rasp.uom_id, sh_uom.uom_id \
                                    #     ) AS modified_stock, \
                                    #     ARRAY_AGG( \
                                    #         COALESCE( \
                                    #             ( \
                                    #                 SELECT SUM(quantity)::numeric(10,3) \
                                    #                 FROM assembly.as_pd_product_stockhistory apsh \
                                    #                 WHERE apsh.productstock_id = aps.id AND apsh.parentproduct_id = pro.parentproduct_id \
                                    #                 AND apsh.sodetails_id = asod.id AND productionschedule_id IS NULL AND deleted = false \
                                    #             ), \
                                    #             0 \
                                    #         )::text ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                    #     ) AS issued_stock, \
                                    #     ARRAY_AGG( \
                                    #         CAST(pro.reserve_stock_qty AS text) \
                                    #         ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                    #     ) AS reserved_stock, \
                                    #     ARRAY_AGG( \
                                    #         CAST(pro.tobeproduced_qty AS text) \
                                    #         ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                    #     ) AS tobeproduced_qty, \
                                    #     CAST( \
                                    #         GREATEST( CAST(COALESCE(aps.currentstock, 0) AS numeric(10,3)) - CAST(SUM(pro.reserve_stock_qty) AS numeric(10,3)), 0 ) AS text \
                                    #     ) AS remaining_stock, \
                                    #     CASE \
                                    #         WHEN sh_uom.code IS NULL THEN suom.code \
                                    #         ELSE sh_uom.code \
                                    #     END AS unit_of_measurement, \
                                    #     pro.product_id, \
                                    #     ARRAY_AGG( \
                                    #         pro.parentproduct_id \
                                    #         ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                    #     ) AS parentproduct_id, \
                                    #     ARRAY_AGG( \
                                    #         pro.so_details_id \
                                    #         ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                    #     ) AS so_details_id, \
                                    #     ( \
                                    #         SELECT DISTINCT aps2.id \
                                    #         FROM assembly.as_pd_product_stock aps2 \
                                    #         WHERE aps2.product_id = pro.product_id \
                                    #     ) AS stock_id, \
                                    #     ARRAY_AGG( \
                                    #         pro.id \
                                    #         ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                    #     ) AS reserve_table_id, \
                                    #     ARRAY_AGG( \
                                    #         CASE \
                                    #             WHEN ( \
                                    #                 SELECT SUM(quantity) \
                                    #                 FROM assembly.as_pd_product_stockhistory apsh \
                                    #                 WHERE apsh.productstock_id = aps.id AND apsh.parentproduct_id = pro.parentproduct_id \
                                    #                 AND apsh.sodetails_id = asod.id AND productionschedule_id IS NULL AND deleted = false \
                                    #             ) >= pro.po_qty \
                                    #             THEN 'Issued' \
                                    #             WHEN pro.po_qty > 0 AND aps.currentstock >= pro.po_qty \
                                    #             THEN 'True' \
                                    #             WHEN pro.po_qty > 0 AND pro.reserve_stock_qty = aps.currentstock AND pro.tobeproduced_qty = 0 \
                                    #             THEN 'True' \
                                    #             ELSE 'False' \
                                    #         END \
                                    #         ORDER BY pro.reserve_stock_qty DESC, pro.updatedon ASC \
                                    #     ) AS enough_stock, \
                                    #     rasp.uom_id AS product_uom_id, \
                                    #     sh_uom.uom_id AS stock_history_uom_id, \
                                    #     ARRAY_AGG( \
                                    #         (SELECT SUM(scheduledquantity) \
                                    #         FROM assembly.as_production_schedule \
                                    #         WHERE childproduct_id = pro.product_id AND parentproduct_id = pro.parentproduct_id AND so_details_id = asod.id) \
                                    #     ) AS scheduled_quantity \
                                    # FROM assembly.as_pd_product_reserveorder pro \
                                    # LEFT JOIN assembly.as_pd_product rasp ON rasp.id = pro.product_id \
                                    # LEFT JOIN assembly.as_pd_product_stock aps ON aps.product_id = pro.product_id \
                                    # LEFT JOIN assembly.as_pd_product lasp ON lasp.id = pro.parentproduct_id \
                                    # LEFT JOIN assembly.as_pd_product_salesorderdetails asod ON asod.id = pro.so_details_id \
                                    # LEFT JOIN assembly.as_pd_product_salesorders aso ON aso.id = asod.so_id \
                                    # LEFT JOIN stock_history_uom sh_uom ON sh_uom.productstock_id = aps.id \
                                    # AND sh_uom.parentproduct_id = pro.parentproduct_id AND sh_uom.sodetails_id = asod.id AND sh_uom.stockevent = 'Issue' \
                                    # LEFT JOIN data.cm_uom suom ON suom.id = rasp.uom_id \
                                    # GROUP BY rasp.code, rasp.revisionno, pro.product_id, aps.currentstock, rasp.description, rasp.uom_id, suom.code, sh_uom.uom_id, sh_uom.code \
                                    # ORDER BY SUM(pro.tobeproduced_qty) DESC; \


reservedOrder = WITH distinct_so_details AS ( \
                    SELECT DISTINCT ON (pro.so_details_id) \
                        pso.referencedocumentnumber, \
                        asp.code AS product, \
                        asp.revisionno, \
                        asp.description, \
                        psod.linenumber, \
                        (SELECT po_qty FROM assembly.as_pd_product_reserveorder \
						 WHERE parentproduct_id = pro.parentproduct_id \
						 AND so_details_id = pro.so_details_id LIMIT 1) AS quantity, \
                        psod.dispatchdate, \
                        pro.so_details_id, \
                        pro.parentproduct_id, \
                        pro.updatedon \
                    FROM assembly.as_pd_product_reserveorder pro \
                    JOIN assembly.as_pd_product_salesorderdetails psod ON psod.id = pro.so_details_id \
                    JOIN assembly.as_pd_product_salesorders pso ON pso.id = psod.so_id \
                    JOIN assembly.as_pd_product asp ON asp.id = pro.parentproduct_id \
                    ORDER BY pro.so_details_id, pso.referencedocumentnumber \
                ) \
                SELECT \
                    TRIM(referencedocumentnumber) AS referencedocumentnumber, \
                    TRIM(product) AS product, \
                    TRIM(revisionno) AS revisionno, \
                    TRIM(description) AS description, \
                    linenumber, \
                    quantity, \
                    dispatchdate, \
                    so_details_id, \
                    parentproduct_id, \
                    updatedon \
                FROM distinct_so_details \
                ORDER BY referencedocumentnumber ASC, updatedon ASC;

clearReservedProducts = DELETE FROM assembly.as_pd_product_reserveorder

issuedProductQuantity = SELECT \
                            referencedocumentnumber, \
                            product, \
                            parentproduct, \
                            po_qty, \
                            quantity, \
                            CASE \
                                WHEN quantity = po_qty THEN 'Issued' \
                                WHEN quantity != 0 AND quantity < po_qty THEN 'Partially issued' \
                                ELSE 'Not issued' \
                            END AS is_issued, \
                            product_id, \
                            parentproduct_id, \
                            so_details_id \
                        FROM ( \
                            SELECT \
                                pso.referencedocumentnumber, \
                                ap.code AS product, \
                                lp.code AS parentproduct, \
                                pro.po_qty, \
                                SUM(apsh.quantity) AS quantity, \
                                pro.product_id, \
                                pro.parentproduct_id, \
                                pro.so_details_id \
                            FROM assembly.as_pd_product_reserveorder pro \
                            JOIN assembly.as_pd_product ap ON ap.id = pro.product_id \
                            JOIN assembly.as_pd_product lp ON lp.id = pro.parentproduct_id \
                            JOIN assembly.as_pd_product_salesorderdetails psod ON psod.id = pro.so_details_id \
                            JOIN assembly.as_pd_product_salesorders pso ON pso.id = psod.so_id \
                            JOIN assembly.as_pd_product_stock ps ON ps.product_id = pro.product_id \
                            JOIN assembly.as_pd_product_stockhistory apsh ON apsh.parentproduct_id = pro.parentproduct_id AND apsh.sodetails_id = pro.so_details_id AND apsh.productstock_id = ps.id \
                            WHERE pro.product_id = '{product_id}' \
                                AND pro.parentproduct_id = '{parentproduct_id}' \
                                AND pro.so_details_id = '{sodetails_id}' \
                            GROUP BY \
                                pso.referencedocumentnumber, \
                                ap.code, \
                                lp.code, \
                                pro.po_qty, \
                                pro.product_id, \
                                pro.parentproduct_id, \
                                pro.so_details_id \
                        ) AS subquery_alias;